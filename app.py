# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12AUE-mPEK1Yv_j4xcnob73BsKRdlHaTt
"""

from google.colab import drive
drive.mount('/content/drive')

import pickle

# Run a python(flask)-based web service in your note book
# You can reload this cell to restart the server if you make changes

default_port = 6060

from werkzeug.serving import make_server
from flask.templating import render_template,request
from flask import Flask
import threading

class ServerThread(threading.Thread):

    def __init__(self, app, port):
        threading.Thread.__init__(self)
        self.port = port
        self.srv = make_server('127.0.0.1', port, app)
        self.ctx = app.app_context()
        self.ctx.push()

    def run(self):
        print('starting server on port:',self.port)
        self.srv.serve_forever()

    def shutdown(self):
        self.srv.shutdown()

def start_server(port=default_port):
    global server
    if 'server' in globals() and server:
      print('stopping server')
      stop_server()

    template_folder = '/content/drive/MyDrive/major project/Flask/templates'
    static_folder = '/content/drive/MyDrive/major project/Flask/Static'

    app = Flask(__name__,template_folder=template_folder,static_folder = static_folder)
    with open("/content/drive/MyDrive/major project/Regressor.pkl","rb") as model_file:
        model=pickle.load(model_file)

    # you can add your own routes here as needed
    @app.route("/")
    @app.route("/home")
    def home():
      return render_template('loan_calculator.html')


    @app.route("/predict", methods = ["GET","POST"])
    def predict():
      if request.method == "POST":
        try:
            Income_USD = float(request.form.get("income"))
            Credit_Score = float(request.form.get("credit_score"))
            Current_Loan_Expenses_USD = int(request.form.get("current_loan_expenses"))
            Age = int(request.form.get("age"))
            Gender = request.form.get("gender")
            Profession = request.form.get("profession")
        # Call the predict_loan function with the input data
            loan_amount = model.predict(Income_USD, Credit_Score, Current_Loan_Expenses_USD,Age,Gender,Profession)

            return render_template("result.html", loan_amount=loan_amount)
        except Exception as e:
            return render_template("error.html", error_message=str(e))



    server = ServerThread(app,port)
    server.start()

def stop_server():
    global server
    if server:
      server.shutdown()
      server = None

# Start the server here
start_server()

import requests

r = requests.get('http://localhost:6060')
print(r.text)

# By executing this cell you will dynamically create an iframe within this cell of your notebook
# this iframe can load an arbitrary web application which can access the flask webservice that is running
# within this notebook.

import IPython.display

def display(port, height):
    shell = """
        (async () => {
            const url = await google.colab.kernel.proxyPort(%PORT%, {"cache": true});
            const iframe = document.createElement('iframe');
            iframe.src = url;
            iframe.setAttribute('width', '100%');
            iframe.setAttribute('height', '%HEIGHT%');
            iframe.setAttribute('frameborder', 0);
            document.body.appendChild(iframe);
        })();
    """
    replacements = [
        ("%PORT%", "%d" % port),
        ("%HEIGHT%", "%d" % height),
    ]
    for (k, v) in replacements:
        shell = shell.replace(k, v)

    script = IPython.display.Javascript(shell)
    IPython.display.display(script)

display(default_port, 400)